//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class BimClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    apiTaskGet(id?: number | undefined, signal?: AbortSignal | undefined): Promise<TaskResponse> {
        let url_ = this.baseUrl + "/api/Task?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiTaskGet(_response);
        });
    }

    protected processApiTaskGet(response: Response): Promise<TaskResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TaskResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiTaskPost(body?: TaskCreateRequest | undefined, signal?: AbortSignal | undefined): Promise<TaskResponse> {
        let url_ = this.baseUrl + "/api/Task";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiTaskPost(_response);
        });
    }

    protected processApiTaskPost(response: Response): Promise<TaskResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData400) {
                result400 = {} as any;
                for (let key in resultData400) {
                    if (resultData400.hasOwnProperty(key))
                        (<any>result400)![key] = resultData400[key] !== undefined ? resultData400[key] : [];
                }
            }
            else {
                result400 = <any>null;
            }
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TaskResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiTaskPut(body?: TaskUpdateRequest | undefined, signal?: AbortSignal | undefined): Promise<TaskResponse> {
        let url_ = this.baseUrl + "/api/Task";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            signal,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiTaskPut(_response);
        });
    }

    protected processApiTaskPut(response: Response): Promise<TaskResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData400) {
                result400 = {} as any;
                for (let key in resultData400) {
                    if (resultData400.hasOwnProperty(key))
                        (<any>result400)![key] = resultData400[key] !== undefined ? resultData400[key] : [];
                }
            }
            else {
                result400 = <any>null;
            }
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TaskResponse>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    apiTaskDelete(id?: number | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Task?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiTaskDelete(_response);
        });
    }

    protected processApiTaskDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiTasks(body?: TaskTableRequest | undefined, signal?: AbortSignal | undefined): Promise<TaskResponseDataTableReply> {
        let url_ = this.baseUrl + "/api/Tasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiTasks(_response);
        });
    }

    protected processApiTasks(response: Response): Promise<TaskResponseDataTableReply> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskResponseDataTableReply.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TaskResponseDataTableReply>(null as any);
    }
}

export class DataTableFilter implements IDataTableFilter {
    propValue?: string | undefined;
    filterType?: FilterType;

    constructor(data?: IDataTableFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propValue = _data["propValue"];
            this.filterType = _data["filterType"];
        }
    }

    static fromJS(data: any): DataTableFilter {
        data = typeof data === 'object' ? data : {};
        let result = new DataTableFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propValue"] = this.propValue;
        data["filterType"] = this.filterType;
        return data;
    }
}

export interface IDataTableFilter {
    propValue?: string | undefined;
    filterType?: FilterType;
}

export enum FilterType {
    Equals = "Equals",
    NotEquals = "NotEquals",
    StartsWith = "StartsWith",
    EndsWith = "EndsWith",
    Contains = "Contains",
    Flags = "Flags",
    MultiEqual = "MultiEqual",
}

export class TaskCreateRequest implements ITaskCreateRequest {
    name!: string;
    description?: string | undefined;
    priority!: number;
    status!: TaskStatusEnum;

    constructor(data?: ITaskCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.priority = _data["priority"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): TaskCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TaskCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["priority"] = this.priority;
        data["status"] = this.status;
        return data;
    }
}

export interface ITaskCreateRequest {
    name: string;
    description?: string | undefined;
    priority: number;
    status: TaskStatusEnum;
}

export class TaskResponse implements ITaskResponse {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    priority?: number;
    status?: TaskStatusEnum;

    constructor(data?: ITaskResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.priority = _data["priority"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): TaskResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TaskResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["priority"] = this.priority;
        data["status"] = this.status;
        return data;
    }
}

export interface ITaskResponse {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    priority?: number;
    status?: TaskStatusEnum;
}

export class TaskResponseDataTableReply implements ITaskResponseDataTableReply {
    data?: TaskResponse[] | undefined;
    count?: number;

    constructor(data?: ITaskResponseDataTableReply) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TaskResponse.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): TaskResponseDataTableReply {
        data = typeof data === 'object' ? data : {};
        let result = new TaskResponseDataTableReply();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface ITaskResponseDataTableReply {
    data?: TaskResponse[] | undefined;
    count?: number;
}

export enum TaskStatusEnum {
    Initial = "Initial",
    InProgress = "InProgress",
    Complete = "Complete",
}

export class TaskTableRequest implements ITaskTableRequest {
    name?: DataTableFilter;
    description?: DataTableFilter;
    status?: DataTableFilter;
    priority?: DataTableFilter;
    countOnPage?: number;
    pageIndex?: number;
    numberOfPages?: number;

    constructor(data?: ITaskTableRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? DataTableFilter.fromJS(_data["name"]) : <any>undefined;
            this.description = _data["description"] ? DataTableFilter.fromJS(_data["description"]) : <any>undefined;
            this.status = _data["status"] ? DataTableFilter.fromJS(_data["status"]) : <any>undefined;
            this.priority = _data["priority"] ? DataTableFilter.fromJS(_data["priority"]) : <any>undefined;
            this.countOnPage = _data["countOnPage"];
            this.pageIndex = _data["pageIndex"];
            this.numberOfPages = _data["numberOfPages"];
        }
    }

    static fromJS(data: any): TaskTableRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TaskTableRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["description"] = this.description ? this.description.toJSON() : <any>undefined;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        data["priority"] = this.priority ? this.priority.toJSON() : <any>undefined;
        data["countOnPage"] = this.countOnPage;
        data["pageIndex"] = this.pageIndex;
        data["numberOfPages"] = this.numberOfPages;
        return data;
    }
}

export interface ITaskTableRequest {
    name?: DataTableFilter;
    description?: DataTableFilter;
    status?: DataTableFilter;
    priority?: DataTableFilter;
    countOnPage?: number;
    pageIndex?: number;
    numberOfPages?: number;
}

export class TaskUpdateRequest extends TaskCreateRequest implements ITaskUpdateRequest {
    id!: number;

    constructor(data?: ITaskUpdateRequest) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TaskUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TaskUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface ITaskUpdateRequest extends ITaskCreateRequest {
    id: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}